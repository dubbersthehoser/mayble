// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package database

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books(created_at, updated_at, title, author, genre, ratting)
VALUES (
	?,
	?,
	?,
	?,
	?,
	?
)
RETURNING id, created_at, updated_at, title, author, genre, ratting
`

type CreateBookParams struct {
	CreatedAt int64
	UpdatedAt int64
	Title     string
	Author    string
	Genre     string
	Ratting   int64
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Author,
		arg.Genre,
		arg.Ratting,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Author,
		&i.Genre,
		&i.Ratting,
	)
	return i, err
}

const destroyBook = `-- name: DestroyBook :exec
DELETE FROM books WHERE id = ?
`

func (q *Queries) DestroyBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, destroyBook, id)
	return err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, title, author, genre, ratting FROM books
`

type GetAllBooksRow struct {
	ID      int64
	Title   string
	Author  string
	Genre   string
	Ratting int64
}

func (q *Queries) GetAllBooks(ctx context.Context) ([]GetAllBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBooksRow
	for rows.Next() {
		var i GetAllBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.Ratting,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookAuthor = `-- name: UpdateBookAuthor :exec
UPDATE books 
SET updated_at = ?, author = ?
WHERE id = ?
`

type UpdateBookAuthorParams struct {
	UpdatedAt int64
	Author    string
	ID        int64
}

func (q *Queries) UpdateBookAuthor(ctx context.Context, arg UpdateBookAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateBookAuthor, arg.UpdatedAt, arg.Author, arg.ID)
	return err
}

const updateBookRatting = `-- name: UpdateBookRatting :exec
UPDATE books
SET updated_at = ?, ratting = ?
WHERE id = ?
`

type UpdateBookRattingParams struct {
	UpdatedAt int64
	Ratting   int64
	ID        int64
}

func (q *Queries) UpdateBookRatting(ctx context.Context, arg UpdateBookRattingParams) error {
	_, err := q.db.ExecContext(ctx, updateBookRatting, arg.UpdatedAt, arg.Ratting, arg.ID)
	return err
}
