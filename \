package gui

import (
	"time"
	"strings"

	"fyne.io/fyne/v2/data/binding"

	"github.com/dubbersthehoser/mayble/internal/controler"
)

type SortOrder int
const (
	ASC  int = iota
	DESC
)

func NewOrderingComp(orderBy string, ordering SortOrder) func(*ListedBook, *ListedBook) int {

	titleCompare := func(a *ListedBook, b *ListedBook) int {
		return strings.Compare(a.Book.Title, b.Book.Title)
	}
	authorCompare := func(a *ListedBook, b *ListedBook) int {
		return strings.Compare(a.Book.Author, b.Book.Author)
	}
	genreCompare := func(a *ListedBook, b *ListedBook) int {
		return strings.Compare(a.Book.Genre, b.Book.Genre)
	}
	rattingCompare := func(a *ListedBook, b *ListedBook) int {
		if a.Book.Ratting > b.Book.Ratting {
			return 1
		} else if a.Book.Ratting < b.Book.Ratting {
			return -1
		} else {
			return 0
		}
	}

	applyOrdering := func(fn func(*ListedBook, *ListedBook) int) func(*ListedBook, *ListedBook) int {
		if ordering == DESC {
			return func(a *ListedBook, b *ListedBook) int {
				return fn(a, b) * -1
				
			}
		} else {
			return fn
		}
	}

	switch orderBy {
	case "titles", "Titles":
		return applyOrdering(titleCompare)
	case "authors", "Authors":
		return applyOrdering(authorCompare)
	case "genres", "Genres":
		return applyOrdering(genreCompare)
	case "rattings", "Ratttings":
		return applyOrdering(rattingCompare)
	default:
		fmt.Printf("%s: ordering not implemented\n", v.orderBy)
	}
}

type FyneVM struct {
	VM           *controler.VM
	SelectedBook *ListedBook
	ListedBooks  []ListedBook
	SortOrder    SortOrder
	OrderComp    func(a *ListedBook, b *ListedBook) int
}

func NewFyneVM() *FyneVM {
	vm := &FyneVM{
		VM: controler.NewVM()
	}
	return vm
}

func (vm *FyneVM) SetSelectedBook(index int) {
	if index >= vm.ListedSize() {
		log.Fatal("FyneVM.SetSelectedBook(): index out of range")
	}
	vm.SelectedBook = &ListedBooks[index]
}

func (vm *FyneVM) GetBook(index int) *ListedBook {
	if index >= vm.ListedSize() {
		log.Fatal("FyneVM.GetBook(): index out of range")
	}
	return &mv.ListedBook[index]
}

func (vm *FyneVM) ListedBookCount() int {
	return len(vm.ListedBooks)
}

type ListedBook struct {
	Book     *controler.BookVM
	Title    binding.String
	Author   binding.String
	Genre    binding.String
	Ratting  binding.String
	LoanName binding.String
	LoanDate binding.String
}

func (l *ListedBook) Update(book *ListedBook) {
	if !l.Book.Is(book.Book) {
		fmt.Printf("\n")
		log.Fatal("")
	}
	title, _ := book.Title.Get()
	author, _ := book.Author.Get()
	genre, _ := book.Genre.Get()
	ratting, _ := book.Ratting.Get()
	loanName, _ := book.loanName.Get()
	loanDate, _ := book.loanDate.Get()
	l.Title.Set(title)
	l.Author.Set(author)
	l.Genre.Set(genre)
	l.Ratting.Set(loanName)
	l.LoanName.Set(loanName)
	l.LoanDate.Set(loanDate)
}

func NewListedBook(book *controler.BookVM) *BookListed {
	b := &ListedBook{
		Book:     book,
		Title:    binding.NewString(),
		Author:   binding.NewString(),
		Genre:    binding.NewString(),
		Ratting:  binding.NewString(),
		LoanName: binding.NewString(),
		LoanDate: binding.NewString(),
	}
	return b
}

